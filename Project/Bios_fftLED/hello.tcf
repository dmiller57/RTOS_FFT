/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== hello.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.ezdsp5502");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Enable heaps in DARAM and define label SEG0 for heap usage.
 */

bios.DARAM.createHeap      = true;
bios.DARAM.enableHeapLabel = true;
bios.DARAM["heapLabel"]    = prog.extern("SEG0");
bios.DARAM.heapSize        = 0x500;
bios.MEM.BIOSOBJSEG = prog.get("DARAM");
bios.MEM.MALLOCSEG = prog.get("DARAM");


/*
 *  Define the GBL memory model 
 */

bios.GBL.MEMORYMODEL = "LARGE";

/*
 * Set the clock microseconds to 1000
 */

bios.CLK.MICROSECONDS = 1000; 
/*
 * Create and initialize a LOG object
 */

var trace;
trace         = bios.LOG.create("trace");
trace.bufLen  = 1024;
trace.logType = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

bios.SWI.instance("KNL_swi").order = 2;
bios.GBL.BOARDNAME = "c5502";
bios.IDL.instance("LNK_dataPump").order = 1;
bios.IDL.instance("RTA_dispatcher").order = 2;
bios.IDL.instance("IDL_cpuLoad").order = 3;
bios.IDL.instance("PWRM_idleDomains").order = 4;
bios.IDL.create("IDL0");
bios.IDL.instance("IDL0").order = 5;
bios.IDL.instance("IDL0").fxn = prog.extern("myIDLThread");
bios.HWI.instance("HWI_INT6").fxn = prog.extern("HWI_I2S_Rx");
bios.HWI.instance("HWI_INT6").useDispatcher = 1;
bios.HWI.instance("HWI_INT6").interruptMask0 = "all";
bios.HWI.instance("HWI_INT6").interruptMask1 = "all";
bios.HWI.instance("HWI_INT7").fxn = prog.extern("HWI_I2S_Tx");
bios.HWI.instance("HWI_INT7").useDispatcher = 1;
bios.HWI.instance("HWI_INT7").interruptMask0 = "all";
bios.HWI.instance("HWI_INT7").interruptMask1 = "all";
bios.GBL.CLKOUT = 300.0000;
bios.CLK.TIMERSELECT = "Timer 0";

/*
 * Create and initialize a TSK object
 */

var task;
task          = bios.TSK.create("task");
task.priority = 1;
task.fxn      = prog.decl("taskFxn");
task.arg0     = 10;


bios.IDL.create("IDL1");
bios.IDL.instance("IDL1").order = 6;
bios.IDL.instance("IDL1").fxn = prog.extern("theButtons");
bios.IDL.instance("IDL1").comment = "button and LED func";
bios.HWI.instance("HWI_INT6").interruptMask0 = "all";
bios.IDL.instance("IDL1").destroy();
bios.SWI.instance("PRD_swi").order = 1;
bios.SWI.create("SWI_Audio");
bios.SWI.instance("SWI_Audio").order = 4;
bios.SWI.instance("SWI_Audio").fxn = prog.extern("SWI_AudioProc");
bios.TSK.instance("TSK_idle").order = 1;
bios.TSK.instance("task").destroy();
bios.MBX.create("audioMBX");
bios.MBX.instance("audioMBX").comment = "for storing audio samples";
bios.MBX.instance("audioMBX").messageSize = 96;
bios.MBX.create("fftMBX");
bios.MBX.instance("fftMBX").comment = "for storing audio samples";
bios.MBX.instance("fftMBX").messageSize = 96;
bios.MBX.instance("fftMBX").length = 256;
bios.TSK.create("audioTSK");
bios.TSK.instance("audioTSK").order = 2;
bios.TSK.instance("audioTSK").priority = 15;
bios.TSK.create("buttonTSK");
bios.TSK.instance("buttonTSK").order = 3;
bios.TSK.instance("buttonTSK").priority = 14;
bios.TSK.create("fftTSK");
bios.TSK.instance("fftTSK").order = 5;
bios.TSK.instance("fftTSK").priority = 13;
bios.TSK.instance("audioTSK").fxn = prog.extern("TSK_audio", "asm");
bios.TSK.instance("buttonTSK").fxn = prog.extern("TSK_button", "asm");
bios.TSK.instance("fftTSK").fxn = prog.extern("TSK_fft", "asm");
bios.MBX.instance("fftMBX").comment = "fft mailbox";
bios.MBX.instance("audioMBX").messageSize = 48;
bios.MBX.instance("audioMBX").messageSize = 96;
bios.MBX.instance("audioMBX").length = 2;
bios.MBX.instance("fftMBX").destroy();
bios.TSK.instance("audioTSK").fxn = prog.extern("TSK_audio");
bios.TSK.instance("buttonTSK").fxn = prog.extern("TSK_button");
bios.TSK.instance("fftTSK").fxn = prog.extern("TSK_fft");
bios.MBX.create("fftMBX");
bios.MBX.instance("fftMBX").messageSize = 256;
bios.TSK.instance("buttonTSK").priority = 13;
bios.TSK.instance("fftTSK").priority = 14;
bios.TSK.instance("buttonTSK").priority = 14;
bios.TSK.instance("buttonTSK").priority = 13;
bios.TSK.instance("buttonTSK").priority = 14;
bios.TSK.instance("fftTSK").priority = 13;
bios.TSK.instance("fftTSK").stackSize = 2048;
bios.TSK.instance("fftTSK").order = 4;
bios.TSK.create("lcdTSK");
bios.TSK.instance("lcdTSK").order = 6;
bios.TSK.instance("lcdTSK").fxn = prog.extern("TSK_lcd");
bios.SEM.create("SEM_i2c");
bios.SEM.instance("SEM_i2c").comment = "wait for i2c resource";
bios.MBX.create("lcdMBX");
bios.MBX.instance("lcdMBX").messageSize = 256;
bios.MBX.instance("lcdMBX").destroy();
bios.MBX.create("lcdMBX");
bios.MBX.instance("lcdMBX").messageSize = 256;
bios.TSK.instance("lcdTSK").stackSize = 2048;
bios.MBX.instance("lcdMBX").elementSeg = prog.get("VECT");
bios.TSK.instance("lcdTSK").stackSize = 1024;
bios.MBX.instance("lcdMBX").elementSeg = prog.get("DARAM");
bios.TSK.instance("lcdTSK").stackSize = 2048;
bios.TSK.instance("lcdTSK").stackSize = 1024;
bios.TSK.instance("buttonTSK").stackSize = 512;
bios.TSK.instance("TSK_idle").stackSize = 512;
bios.TSK.instance("audioTSK").stackSize = 512;
bios.TSK.instance("lcdTSK").stackSize = 512;
bios.TSK.instance("lcdTSK").priority = 13;
bios.MBX.instance("lcdMBX").messageSize = 128;
bios.TSK.instance("lcdTSK").priority = 12;
bios.TSK.instance("lcdTSK").priority = 13;
bios.TSK.instance("lcdTSK").stackSize = 1024;
bios.TSK.instance("lcdTSK").priority = 12;
bios.TSK.instance("lcdTSK").stackSize = 256;
bios.TSK.instance("fftTSK").stackSize = 4096;
bios.TSK.instance("lcdTSK").priority = 13;
bios.TSK.instance("lcdTSK").stackSize = 1024;
bios.TSK.instance("fftTSK").stackSize = 2048;
bios.SEM.instance("SEM_i2c").count = 1;
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
